"class JuliaSet(object):\n    \n    def __init__(self, c, n=100):\n        self.c = c\n        self.n = n\n        self._d = 0.001\n        self._complexplane = np.array([])\n        self._set = np.array([])\n        \n\n\n    def makeplane(self):\n\n        i=np.arange(-2,2,self._d)\n\n        self._complexplane=[complex(x,y) for x in i for y in i]\n\n                \n\n    def juliamap(self, z):\n\n        return (z**2) + self.c\n\n    \n\n    def iterate(self, z):\n\n        m = 0\n\n        while True:\n\n            z=self.juliamap(z)\n\n            m = m + 1\n\n            if  abs(z) > 2:\n\n                return m\n\n            if m >=self.n:\n\n                return 0\n\n\n\n    def set_spacing(self, d):\n\n        self._d = d\n\n        self.makeplane()\n\n\n\n    def generate(self):\n\n        self.set = [self.iterate(z) for z in self._complexplane]\n\n        return self.set\n\n\n"
{"patch":[[[[-1,"class JuliaSet(object):\n    \n    def __init__(self, c, n=100):\n        self.c = c\n        self.n = n\n        self._d = 0.001\n        self._complexplane = np.array([])\n        self._set = np.array([])\n        \n\n\n    def makeplane(self):\n\n        i=np.arange(-2,2,self._d)\n\n        self._complexplane=[complex(x,y) for x in i for y in i]\n\n                \n\n    def juliamap(self, z):\n\n        return (z**2) + self.c\n\n    \n\n    def iterate(self, z):\n\n        m = 0\n\n        while True:\n\n            z=self.juliamap(z)\n\n            m = m + 1\n\n            if  abs(z) > 2:\n\n                return m\n\n            if m >=self.n:\n\n                return 0\n\n\n\n    def set_spacing(self, d):\n\n        self._d = d\n\n        self.makeplane()\n\n\n\n    def generate(self):\n\n        self.set = [self.iterate(z) for z in self._complexplane]\n\n        return self.set\n\n\n"]],0,0,847,0]],"time":1443578374387}