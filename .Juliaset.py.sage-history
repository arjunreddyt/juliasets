"class JuliaSet(object):\n    \n    def __init__(self, c, n=100):\n        self.c = c\n        self.n = n\n        self._d = 0.001\n        self._complexplane = []\n        self.set = []\n       \n    def makeplane(self):\n        r=[i*self._d for i in range(int(-2/self._d),int(2/self._d),1)]\n        self._complexplane=[complex(x,y) for x in r for y in r]\n\n    def juliamap(self, z):\n        return (z**2) + self.c\n\n    def iterate(self, z):\n        m = 0\n        while True:\n            z=self.juliamap(z)\n            m = m + 1\n            if  abs(z) > 2:\n                return m\n            if m >=self.n:\n                return 0\n\n    def set_spacing(self, d):\n        self._d = d\n        self.makeplane()\n\n    def generate(self):\n        self.set = [self.iterate(z) for z in self._complexplane]\n        return self.set\n\n"
{"patch":[[[[0," self.c\n"],[1,"   "],[0,"\n    def"]],398,398,16,19]],"time":1443673682234}
{"patch":[[[[0,"lf.c\n   "],[1," "],[0,"\n    def"]],401,401,16,17]],"time":1443673679903}
{"patch":[[[[0,"y in r]\n"],[1,"       "],[0,"\n    def"]],339,339,16,23]],"time":1443673677674}
{"patch":[[[[0," y in r]\n       "],[1," "],[0,"\n    def juliama"]],338,338,32,33]],"time":1443673675637}